geom_point(position = posn.jd, alpha = 0.6) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1))
# Plot1: Jiittered, doged scatter plot with transparent points
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6)
# Plot2: Mean and SD - the easy way
wt.cyl.am +
geom_point(position = posn.d) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1))
# Plot3: Mean and 95% CI - the easy way
wt.cyl.am +
geom_point(position = posn.d) +
stat_summary(fun.data = mean_cl_normal)
# Plot4: Mean and SD = with T-tipped error bars
wt.cyl.am +
stat_summary(geom = "point", fun.y = mean,
position = posn.d)
# Plot1: Jiittered, doged scatter plot with transparent points
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6)
# Plot2: Mean and SD - the easy way
wt.cyl.am +
geom_point(position = posn.d) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1))
# Plot3: Mean and 95% CI - the easy way
wt.cyl.am +
geom_point(position = posn.d) +
stat_summary(fun.data = mean_cl_normal)
# Plot4: Mean and SD = with T-tipped error bars
wt.cyl.am +
stat_summary(geom = "point", fun.y = mean,
position = posn.d) +
stat_summary(geom = "errorbar", fun.data = mean_sdl,
position = posn.d, fun.args = list(mult = 1), width = 0.1)
data.frame(ymin = min(x),
ymax = max(x))
gg_range <- function(x){
data.frame(ymin = min(x),
ymax = max(x))
}
gg_range <- function(x){
data.frame(ymin = min(x),
ymax = max(x))
}
med_IQR <- function(x){
data.frame(y = median(x),
ymin = quantile(x)[2],
ymax = quantile(x)[4])
}
gg_range <- function(x){
data.frame(ymin = min(x),
ymax = max(x))
}
med_IQR <- function(x){
data.frame(y = median(x),
ymin = quantile(x)[2],
ymax = quantile(x)[4])
}
# Now we use these functions on the base plot
wt.cyl.am +
stat_summary(geom = "linerange",
fun.data = gg_range, position = posn.d, size = 3) +
stat_summary(geom = "linerange", fun.data = med_IQR,
position = posn.d, size = 3,
alpha = 0.4) +
stat_summary(geom = "point", fun.y = median,
position = posn.d, size = 3,
col = "black", shape = "X")
wt.cyl.am +
stat_summary(geom = "linerange",
fun.data = gg_range, position = posn.d, size = 3) +
stat_summary(geom = "linerange", fun.data = med_IQR,
position = posn.d, size = 3,
alpha = 0.1) +
stat_summary(geom = "point", fun.y = median,
position = posn.d, size = 3,
col = "black", shape = "X")
gg_range <- function(x){
data.frame(ymin = min(x),
ymax = max(x))
}
med_IQR <- function(x){
data.frame(y = median(x),
ymin = quantile(x)[2],
ymax = quantile(x)[4])
}
# Now we use these functions on the base plot
wt.cyl.am +
stat_summary(geom = "linerange",
fun.data = med_IQR, position = posn.d, size = 3) +
stat_summary(geom = "linerange", fun.data = gg_range,
position = posn.d, size = 3,
alpha = 0.4) +
stat_summary(geom = "point", fun.y = median,
position = posn.d, size = 3,
col = "black", shape = "X")
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
coord_cartesian(limit = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = F, span = 0.7)  +
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = F, span = 0.9)  +
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = T, span = 0.9)  +
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = T, span = 0.9)  +
coord_cartesian(xlim = c(4,6))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = T, span = 0.9)  +
coord_cartesian(xlim = c(5.3,6.5))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point()
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal()
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_fixed()
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal(ylim = c(0, 8)) +
# First: Set limits without cutting of values
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = T, span = 0.9)  +
coord_cartesian(xlim = c(5.3,6.5))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal(ylim = c(0, 8)) +
# First: Set limits without cutting of values
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
geom_smooth(method = "loess", se = T, span = 0.9)  +
coord_cartesian(xlim = c(5.3,6.5))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal(ylim = c(0, 8))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal(ylim = c(0, 8), xlim = c(0,8))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
coord_equal(ylim = c(2, 8), xlim = c(2,8))
thin.bar <- ggplot(mtcars, aes(1, fill = cyl)) +
geom_bar()
thin.bar <- ggplot(mtcars, aes(1, fill = factor(cyl))) +
geom_bar()
thin.bar
thin.bar + coord_polar()
thin.bar + coord_polar(theta= "y")
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
facet_grid(. ~ Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
facet_grid(. ~ Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
facet_grid(Species ~ .)
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
facet_grid(. ~ Species)
# We can split based on columns, as above, or along the rows
ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point() +
facet_grid(Species ~ .)
str(mtcars)
ggplot(mtcars, aes(wt, mpg, col = cyl)) +
geom_point()
str(mtcars)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_point() +
facet_grid(am ~ cyl)
ggplot(mtcars, aes(wt, mpg, col = hp)) +
geom_point() +
facet_grid(am ~ cyl)
ggplot(mtcars, aes(wt, mpg, col = hp)) +
geom_point() +
facet_grid(cyl ~ am)
ggplot(mtcars, aes(wt, mpg, col = hp)) +
geom_point() +
facet_grid(am ~ cyl)
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
library(RColorBrewer)
if(!library(RColorBrewer)){install.packages("RColorBrewer"); library(RColorBrewer)}
if(!require(RColorBrewer)){install.packages("RColorBrewer"); library(RColorBrewer)}
# Import the brewer palet package
if(!require(RColorBrewer)){install.packages("RColorBrewer"); library(RColorBrewer)}
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
# Basic scatter plot, add color scale:
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)
# Facet according on rows and columns.
ggplot(mtcars, aes(wt, mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol) +
facet_grid(gear ~ vs)
# Add more variables
ggplot(mtcars, aes(wt, mpg, col = cyl_am, size = disp)) +
geom_point() +
scale_color_manual(values = myCol) +
facet_grid(gear ~ vs)
require(ggplot2)
require(caret)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
geom_point(aes(Petal.Length, Petal.Width, col="red"))
ggplot(iris.tidy)
library(MASS)
library(ggplot2)
mammals
# Visualizing it
ggplot(mammals, aes(body, brain)) +
geom_point() +
stat_smooth(method="lm", col="red",
se=FALSE)
#
library(scales)
ggplot(mammals, aes(body, brain)) +
annotation_logticks() +
geom_point(alpha=0.6) +
coord_fixed(xlim=c(10^-3, 10^4), ylim=c(10^-1, 10^4)) +
scale_x_log10(expression("Body weight (log"["10"]*"(Kg))"),
breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x))) +
scale_y_log10(expression("Brain weight (log"["10"]*"(g))"),
breaks= trans_breaks("log10", function(x) 10^x),
labels= trans_format("log10", math_format(10^.x))) +
stat_smooth(method="lm", col="red", se = FALSE, size = 1)  +
theme_classic()
data(iris)
iris
# Displaying the initial dataset
ggplot(data = iris, aes(Sepal.Length, Sepal.Width, colour=Species)) +
geom_point() +
scale_x_continuous(expression("Lenght (cm)")) +
scale_y_continuous(expression("Width(cm)"))
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_point()
ggplot(mtcars, aes(wt, mpg, col=disp)) +
geom_point()
ggplot(mtcars, aes(wt, mpg, size=disp)) +
geom_point()
ggplot(mtcars, aes(wt, mpg, shape=disp)) +
geom_point()
levels(iris$Species) <-  unique(iris$Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_jitter(alpha = 0.6) +
facet_grid(. ~ Species) +
stat_smooth(method="lm", se=FALSE, colour="red") +
scale_y_continuous("Seapl Width (cm)",
limits=c(2,5),
expand = c(0,0)) +
scale_x_continuous("Sepal Length (cm)",
limits= c(4,8),
expand = c(0,0)) +
coord_equal()
levels(iris$Species) <-  unique(iris$Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_jitter(alpha = 0.6) +
facet_grid(. ~ Species) +
stat_smooth(method="lm", se=FALSE, colour="red") +
scale_y_continuous("Seapl Width (cm)",
limits=c(2,5),
expand = c(0,0)) +
scale_x_continuous("Sepal Length (cm)",
limits= c(4,8),
expand = c(0,0)) +
coord_equal() +
# Adding the Theme to the layer
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
strip.background = element_blank(),
axis.text = element_text(colour = "black"),
axis.ticks = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.text = element_blank(),
panel.spacing = unit(1, "lines")
)
levels(iris$Species) <-  unique(iris$Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_jitter(alpha = 0.6) +
facet_grid(. ~ Species) +
stat_smooth(method="lm", se=FALSE, colour="red") +
scale_y_continuous("Seapl Width (cm)",
limits=c(2,5),
expand = c(0,0)) +
scale_x_continuous("Sepal Length (cm)",
limits= c(4,8),
expand = c(0,0)) +
coord_equal() +
# Adding the Theme to the layer
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
strip.background = element_blank(),
axis.text = element_text(colour = "black"),
axis.ticks = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.text = element_blank(),
panel.spacing = unit(1, "lines")
)
str(diamonds)
ggplot(diamonds, aes(carat, price), colour=cut) +
geom_point() +
geom_smooth(se=TRUE, colour="")
str(diamonds)
ggplot(diamonds, aes(carat, price), colour=cut) +
geom_point() +
geom_smooth(se=TRUE, colour="red")
ggplot(diamonds, aes(carat, price, col=clarity)) +
geom_smooth()
plot1 <- ggplot(diamonds, aes(carat, price, col=clarity))
plot1 + geom_point(alpha=0.2)
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + geom_point()
p + geom_jitter()
# Drawing a subset plot with linear regression lines for the given dataset
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
# Draw the lm model as line
carModel <- lm(mpg ~ wt, data=mtcars)
abline(carModel, lty=2)
# Plot the model individually for each subset
lapply(mtcars$cyl, function(x){
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
# Draw the legend
legend(x = 5, y = 33, legend = levels(mtcars$cyl),
col = 1:3, pch = 1, bty = "n")
ggplot(mtcars, aes(wt, mpg, col=cyl)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
geom_smooth(method="lm", se=FALSE, aes(group=1), lty=2)
require(ggplot2)
require(caret)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
geom_point(aes(Petal.Length, Petal.Width, col="red"))
ggplot(iris.tidy)
require(ggplot2)
require(caret)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
geom_point(aes(Petal.Length, Petal.Width, col="red"))
require(tidyr)
# Cleaning the dataset
iris.tidy <- iris %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
# Inspecting the dataset
str(iris.tidy)
# Drawing the plot
ggplot(iris.tidy, aes(Species, Value, col=Part)) +
geom_jitter() +
facet_grid(. ~ Measure)
head(iris)
data("iris")
iris$Flower <- 1:nrow(iris)
# Creating the dataset
iris.wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
# inspecting the dataset
str(iris.wide)
# Plotting Width / Length over Species
ggplot(iris.wide, aes(Length, Width, col=Part)) +
geom_jitter() +
facet_grid(.~ Species)
# Plotting width/ Length by
str(iris.wide)
ggplot(iris.wide, aes(Width, Length, shape=Species, col=Species)) +
geom_jitter() +
facet_grid(.~ Part)
ggplot(mtcars, aes(factor(cyl), fill=factor(am))) +
geom_bar(stat="count", position="stack")
ggplot(mtcars, aes(factor(cyl), fill=factor(am))) +
geom_bar(stat="count", position="fill")
ggplot(mtcars, aes(factor(cyl), fill=factor(am))) +
geom_bar(stat="count", position="dodge")
# Setting the values
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
# Drawing the plot
ggplot(mtcars, aes(factor(cyl), fill=factor(am))) +
geom_bar(stat="count", position="dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission", values = val,
labels= lab)
mtcars$group <- 0
# Plot the data against 0
ggplot(mtcars, aes(mpg, group)) +
geom_jitter() +
scale_y_continuous(limits = c(-2,2))
ggplot(iris, aes(Sepal.Length, Sepal.Width, col=Species)) +
geom_point()
ggplot(iris, aes(Species, Sepal.Width, col=Sepal.Length)) +
geom_point()
ggplot(mtcars, aes(wt, mpg, col=cyl)) +
geom_point(size=4)
ggplot(mtcars, aes(wt, mpg, col=cyl)) +
geom_point(shape=1, size=4)
ggplot(mtcars, aes(wt, mpg, col=cyl)) +
geom_point(alpha=0.6, size=4)
ggplot(diamonds, aes(carat, price, col=clarity)) +
geom_point()
ggplot(diamonds, aes(carat, price, col=clarity)) +
geom_point(alpha=0.5)
ggplot(diamonds, aes(clarity, carat, col=price)) +
geom_point(alpha=0.5)
ggplot(diamonds, aes(clarity, carat, col=price)) +
geom_point(position="jitter", alpha=0.5)
plot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point(aes(col=Species))
plot1
data(iris)
iris.summary <- aggregate(iris[1:4], list(iris$Species), mean)
names(iris.summary)[1] <- "Species"
# Plotting the dataset
plot1 + geom_point(data=iris.summary, shape=15, size=5, aes(col=Species))
# This results in an erros
plot1 + geom_vline(data=iris.summary)
plot1 + geom_vline(data=iris.summary, aes(xintercept= Sepal.Length))
plot1 +
geom_hline(data = iris.summary, aes(yintercept = Sepal.Width)) +
geom_vline(data=iris.summary, aes(xintercept = Sepal.Length))
plot1 +
geom_hline(data = iris.summary, linetype=2,
aes(yintercept = Sepal.Width,
col=Species)) +
geom_vline(data=iris.summary,
aes(xintercept = Sepal.Length, col=Species),
linetype=2)
ggplot(mtcars, aes(factor(cyl), wt)) +
geom_point()
# To conquer overplotting we specify the jitter
ggplot(mtcars, aes(factor(cyl), wt)) +
geom_jitter()
# We Define the position to use jitter
posn.j <- position_jitter(widt=0.05)
ggplot(mtcars, aes(factor(cyl), wt)) +
geom_point(position=posn.j)
ggplot(iris, aes(Sepal.Width, fill = Species)) +
geom_histogram(aes(y = ..density..),binwidth = 0.1, alpha=0.7)
ggplot(iris, aes(Sepal.Width, fill = Species)) +
geom_histogram(aes(y = ..density..),binwidth = 0.1, position="dodge")
ggplot(iris, aes(Sepal.Width, fill = Species)) +
geom_histogram(aes(y = ..density..),binwidth = 0.1, position="fill")
# Looking at the sleeping behaviour based on eating habits
ggplot(msleep, aes(vore)) + geom_bar()
# Chaning the y aes to density, searches for the density variable in the resulting internal stats table
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth=1, fill="lightblue", aes(y=..density..))
# Now in custom colour
myBlue <- "#377EB8"
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth=1, fill=myBlue, aes(y=..density..))
# This displays a continous density curve
ggplot(mtcars, aes(mpg)) +
geom_histogram(stat = "density")
# The standard result uses "stack"
ggplot(mtcars, aes(cyl, fill=factor(am))) +
geom_bar()
# When we set to "dodge", we get a unhappy "next to each other"
ggplot(mtcars, aes(cyl, fill=factor(am))) +
geom_bar(position="dodge")
# Using the "width" setting for the dodge command we can let them overlay
pos_d <- position_dodge(width=0.2)
ggplot(mtcars, aes(cyl, fill=factor(am))) +
geom_bar(position=pos_d, alpha=0.6)
ggplot(mtcars, aes(mpg, col=cyl)) +
geom_freqpoly(binwidth=1)
# Create individual color scales
blues <- brewer.pal(9, "Blues")
ggplot(mtcars, aes(mpg, fill=factor(am))) +
geom_bar(binwidth=1,position="dodge") +
scale_fill_brewer()
if(!require(RColorBrewer)){install.packages("RColorBrewer"); library(RColorBrewer)}
# Import library
if(!require(RColorBrewer)){install.packages("RColorBrewer"); library(RColorBrewer)}
# Create individual color scales
blues <- brewer.pal(9, "Blues")
blue_range <- colorRampPalette(blues)
