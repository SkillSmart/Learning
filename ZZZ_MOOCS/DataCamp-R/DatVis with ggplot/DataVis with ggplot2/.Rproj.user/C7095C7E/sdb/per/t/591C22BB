{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Advanced DataVisualization with ggplot\"\noutput: html_notebook\n---\n\n## Advanced DataVisualization with ggplot - Coordinates and Facets\n\nthis talks about the coord_ function family. \n\nWe can : \n\n- zoom in \n\nSet basic zoom limits to the coordinate system we want to display\n```{r}\n# ggplot sets automatic limits to the dataset, according to the data available\nggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + \n  geom_point()\n\n# We can set the data to use uniform coordinates instead\nggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + \n  geom_point() + \n  coord_equal(ylim = c(2, 8), xlim = c(2,8))\n  \n\n# First: Set limits without cutting of values\nggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + \n  geom_point() + \n  geom_smooth(method = \"loess\", se = T, span = 0.9)  + \n  coord_cartesian(xlim = c(5.3,6.5)) \n\n# \n\n```\n\n## Creating Pie Charts - Using the Polar coordinate system\n\nWe can transform data to a polar, circular represenation using the `coord_polar()` system. \n\n```{r}\n# This creates a dummy variable to fill the proportion of the cyl factors\nthin.bar <- ggplot(mtcars, aes(1, fill = factor(cyl))) + \n  geom_bar()\n\n# We turn this \nthin.bar\n\n# Into a pie chart, by plotting it along a polar coordinate system and specify `theta` to be \"y\"\nthin.bar + coord_polar(theta= \"y\")\n\n```\n\n\n## Facet Layers\n\nThey are a usefull layer to produce small multiples, a concept popularized by Edward Tufte in his 1983 Book \"Visualization of Quantitative Information\".\n\nThe basic idea is, to keep the limits of a plot identical and spread the data over a multitude of parallel plots, broken down according to a factor level. \n\n```{r}\nggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + \n  geom_point() + \n  facet_grid(. ~ Species)\n\n# We can split based on columns, as above, or along the rows\nggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) + \n  geom_point() + \n  facet_grid(Species ~ .)\n```\n\nAnd this can be split both on columns and variables, specifying two categorial variables to compare.\n```{r}\nstr(mtcars)\n\nggplot(mtcars, aes(wt, mpg, col = hp)) + \n  geom_point() + \n  facet_grid(am ~ cyl)\n```\n\n\n\n### Plotting multiple variables at once\n\nThis exercise shows how to plot too many variables at once, using facets, aestethic matches\n\nIts just plain ugly!!!\n```{r}\n# Import the brewer palet package\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\n\n# Code to create the cyl_am col and myCol vector\nmtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = \"_\")\nmyCol <- rbind(brewer.pal(9, \"Blues\")[c(3,6,8)],\n               brewer.pal(9, \"Reds\")[c(3,6,8)])\n\n# Basic scatter plot, add color scale:\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +\n  geom_point() + \n  scale_color_manual(values = myCol)\n\n  \n# Facet according on rows and columns.\nggplot(mtcars, aes(wt, mpg, col = cyl_am)) + \n  geom_point() + \n  scale_color_manual(values = myCol) + \n  facet_grid(gear ~ vs)\n\n\n\n\n# Add more variables\nggplot(mtcars, aes(wt, mpg, col = cyl_am, size = disp)) + \n  geom_point() + \n  scale_color_manual(values = myCol) + \n  facet_grid(gear ~ vs)\n```\n\n## Freeing rows or columsn which are not present in subplots made by facetting\n\nWhen we facet on a variable that does represent only a single category, we end up with lots of duplicates.\nWe can remove them, as we would with `rm.na`, by specifying the axis to free in the function call to `facet_grid()`\n\n```{r}\n# Basic scatter plot\nggplot(mamsleep, aes(time, name, col = sleep)) + \n  geom_point()\n\n# Facet rows accoding to vore\nggplot(mamsleep, aes(time, name, col = sleep)) +\n  geom_point() + \n  facet_grid(vore ~.)\n\n# Specify scale and space arguments to free up rows\nggplot(mamsleep, aes(time, name, col = sleep)) + \n  geom_point() +\n  facet_grid(vore ~. , scale = \"free_y\", space = \"free_y\")\n```\n\n",
    "created" : 1481149349429.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "121482999",
    "id" : "591C22BB",
    "lastKnownWriteTime" : 1480861460,
    "last_content_update" : 1480861460,
    "path" : "D:/AAA_ProgrammingFiles/AAA_Learning/DataCamp-R/DatVis with ggplot/DataVis with ggplot2/Corrdinates_and_Facets.Rmd",
    "project_path" : "Corrdinates_and_Facets.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}